/*
 *  Raytracer.h - Raytracer-based K Factor calculation
 *  Copyright (C) 2012  C. S. Cooper, A. Mukunthan
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 *  Contact Details: Cooper - andor734@gmail.com
 */



#pragma once


#include <queue>
#include <pthread.h>

namespace Urc {
	
	class UrcData;

	/*
	 * Name: Raytracer
	 * Inherits: None
	 * Description: This uses data contained in the UrcData singleton to
	 * 				trace a set of N rays through the road network.
	 */
	class Raytracer {

	public:

		/*
		 * Name: RayPathComponent
		 * Description: This contains the data relevant to one part of a ray path
		 */
		struct RayPathComponent {
			VectorMath::LineSegment mLineSegment;
			VectorMath::Real mDistanceSum;				// total distance travelled by this ray before this component
			VectorMath::Real mReflectionCoefficient;	// reflection coefficient
			unsigned int mReflectionCount;				// number of reflections undergone by this ray
			unsigned int mLastReflectorIndex;
		};

		typedef std::vector<RayPathComponent> RayPathComponentSet;

		struct TraceReport {
			VectorMath::Real mFactorK;
			VectorMath::Real mSpecularPower;
			VectorMath::Real mDiffusePower;
			unsigned int mSpecularRayCount;
			unsigned int mDiffuseRayCount;
			VectorMath::Vector2D mTransmitterPosition;
			VectorMath::Vector2D mReceiverPosition;
			VectorMath::Real mRayPowerMean;
			VectorMath::Real mRayPowerVariance;
			VectorMath::Real mRayPowerMedian;
			std::vector<VectorMath::Real> mRayPowers;
		};
		
	protected:

		// for internal use by the K-Factor estimator
		struct InterceptedRay {
			VectorMath::Real mDistance;
			RayPathComponent *m_pComponent;
		};

		RayPathComponentSet mRaySeq;					// set of rays generated by the transmitter

		unsigned int mRayCount;							// number of rays to be generated
		VectorMath::Real mStartAngle;					// vector angle to start generating rays from
		VectorMath::Real mCarPermitivity;				// LPF of car material

		VectorMath::Real mRayLength;

		bool mExecuted; 								// the trace has been executed

		VectorMath::Vector2D mPositionTX;

		std::queue<RayPathComponent> mRayQueue;

		UrcData::Bucket mBucket;

		pthread_t *mWorkerThreads;
		unsigned int mNumberOfWorkers;
		pthread_mutex_t mRayQueueMutex;
		pthread_mutex_t mRaySetMutex;

		/*
		 * Method: void TraceRay( RayPathComponent );
		 * Description: This traces a ray through the road network.
		 */
		void TraceRay( RayPathComponent );

		/*
		 * Method: bool CheckIntersection( RayPathComponent, VectorMath::Vector2D*, Real*, VectorMath::LineSegment*, int *, int );
		 * Description: This traces a ray through the road network.
		 */
		bool CheckIntersection( RayPathComponent, VectorMath::Vector2D*, VectorMath::Real*, VectorMath::LineSegment*, int *, int* );

		/*
		 * Method: static void *WorkerThread(void *pRT);
		 * Description: Traces the rays through the network. Multiple worker threads can work in parallel.
		 */
		static void *WorkerThread(void *pRT);

		
	public:
	
		/*
		 * Constructor arguments:
		 * 		1. Transmitter Position - location of the transmitter in the network
		 * 		2. Ray Count - number of rays to simulate
		 * 		3. Number of Workers - Specify the number of worker threads
		 */
		Raytracer( VectorMath::Vector2D, unsigned int, unsigned int = 1 );
		virtual ~Raytracer();

		VectorMath::Vector2D GetTransmitterPosition() { return mPositionTX; }

		void SetRayLength( VectorMath::Real l ) { mRayLength = l; }

		/*
		 * Method: RayPathComponentSet *GetRaySet();
		 * Description: Get a pointer to the trace
		 */
		const RayPathComponentSet *GetRaySet() const;

		/*
		 * Method: bool RunTrace();
		 * Description: Run the trace in the worker thread.
		 */
		bool RunTrace();

		/*
		 * Method: void Execute();
		 * Description: Run the trace.
		 */
		void Execute();

		/*
		 * Method: TraceReport ComputeK( VectorMath::Vector2D receiverPosition, VectorMath::Real gain );
		 * Description: This computes the K factor for the receiver given its position, and gain.
		 */
		TraceReport ComputeK( VectorMath::Vector2D, VectorMath::Real );
		
	};



};
